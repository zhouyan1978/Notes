1.建立git仓库的两种方法：

  要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行 git init 
  如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交

  如果想对某个开源项目出一份力，可以先把该项目的 Git 仓库复制一份出来，这就需要用到 git clone 命令
  如果希望在克隆的时候，自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字



2.检查当前文件状态：
  
  要确定哪些文件当前处于什么状态，可以用 git status 命令



3.跟踪新文件 暂存已修改文件：
  
  git add 命令



4.忽略某些文件：
   
  一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，
  比如日志文件，或者编译过程中创建的临时文件等。我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。 



5.查看已暂存和未暂存的更新：

  git diff命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。
  若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 git diff --cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff --staged


6.提交更新：

  git commit -m "注释" 



7.跳过使用暂存：

  Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 git commit 加上 -a 
  选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤



8.移动文件：
  
  用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了
  如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f
  
  我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。换句话说，仅是从跟踪清单中删除。
  用 --cached 选项即可

  git rm后面可以列出文件或者目录的名字，也可以使用 glob 模式（即一些正则表达式）




9.移动文件：
  
  要在 Git 中对文件改名，可以这么做 git mv file_from  file_to



10.查看提交历史：
 
  git log
  常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新
  --pretty 选项，可以指定使用完全不同于默认格式的方式展示提交历史
  format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析
  用 oneline 或 format 时结合 --graph 选项，可以看到开头多出一些 ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况。

  按照时间作限制的选项，比如 --since 和 --until（更多git log条件查询见pro git）

  图形化工具更容易展示历史提交的变化，随 Git 一同发布的 gitk 就是这样一种工具。它是用 Tcl/Tk 写成的，基本上相当于 git log 命令的可视化版本



11.撤销操作：
   
   修改最后一次提交：我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 --amend 选项重新提交

   取消已经暂存的文件：git reset HEAD <file>...

   取消对文件的修改： git checkout -- 



12.远程仓库的使用：
    
   查看当前远程库：git remote 也可以加上 -v 选项（译注：此为 --verbose 的简写，取首字母），显示对应的克隆地址
   
   添加远程仓库：git remote add [shortname] [url]
   
   从远程仓库抓取数据：git fetch origin 会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新（或是上次 fetch 以来别人提交的更新）。
                       有一点很重要，需要记住，fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了
                       ，才能手工合并。
                       一般我们运行 git pull，目的都是要从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。

   推送数据到远程仓库：git push [remote-name] [branch-name]
   
   查看远程仓库信息：git remote show [remote-name]

   远程仓库的删除和重命名：git remote rename      git remote rm



13.打标签：
   
   列出现有标签：git tag

   搜索标签（例子： git tag -l 'v1.4.2.*'）

   新建标签：git tag -a v1.4 -m 'my version 1.4'

   git show 命令查看相应标签的版本信息

   tag签名见pro git

   补加标签：只要在打标签的时候跟上对应提交对象的校验和（或前几位字符）


------------------------------------------------------------------------------------------
                                         git分支

14. 分支基本操作：
       
    新建分支（例子：新建一个 testing 分支，可以使用  git branch testing）
   
    切换分支（例子：我们现在转换到新建的 testing 分支：git checkout testing）

    

15.分支的新建与合并：

   



